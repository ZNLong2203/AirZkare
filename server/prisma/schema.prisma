generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model airport {
  airport_id                               String   @id @db.Uuid
  name                                     String   @db.VarChar
  code                                     String   @unique @db.VarChar
  location                                 String?  @db.VarChar
  flight_flight_arrival_airportToairport   flight[] @relation("flight_arrival_airportToairport")
  flight_flight_departure_airportToairport flight[] @relation("flight_departure_airportToairport")
}

model booking {
  booking_id     String          @id @db.Uuid
  user_id        String?         @db.Uuid
  flight_seat_id String?         @db.Uuid
  price          Float?
  time           DateTime?       @db.Timestamp(6)
  status         booking_status? @default(pending)
  flight_seat    flight_seat?    @relation(fields: [flight_seat_id], references: [flight_seat_id], onDelete: NoAction, onUpdate: NoAction)
  user           user?           @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  payment        payment[]
}

model flight {
  flight_id                                 String        @id @db.Uuid
  airplane_id                               String?       @db.Uuid
  code                                      String?       @db.VarChar
  departure_airport                         String?       @db.Uuid
  arrival_airport                           String?       @db.Uuid
  departure_time                            DateTime?     @db.Timestamp(6)
  arrival_time                              DateTime?     @db.Timestamp(6)
  airplane                                  airplane?     @relation(fields: [airplane_id], references: [airplane_id], onDelete: NoAction, onUpdate: NoAction)
  airport_flight_arrival_airportToairport   airport?      @relation("flight_arrival_airportToairport", fields: [arrival_airport], references: [airport_id], onDelete: NoAction, onUpdate: NoAction)
  airport_flight_departure_airportToairport airport?      @relation("flight_departure_airportToairport", fields: [departure_airport], references: [airport_id], onDelete: NoAction, onUpdate: NoAction)
  flight_seat                               flight_seat[]
}

model passenger {
  passenger_id String           @id @db.Uuid
  user_id      String?          @db.Uuid
  age          Int?
  gender       String?          @db.VarChar
  dob          DateTime?        @db.Date
  phone        String?          @db.VarChar
  city         String?          @db.VarChar
  country      String?          @db.VarChar
  nationality  String?          @db.VarChar
  passport     String?          @db.VarChar
  membership   membership_type? @default(silver)
  user         user?            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model payment {
  payment_id String    @id @db.Uuid
  booking_id String?   @db.Uuid
  method     String?   @db.VarChar
  amount     Float?
  time       DateTime? @db.Timestamp(6)
  booking    booking?  @relation(fields: [booking_id], references: [booking_id], onDelete: NoAction, onUpdate: NoAction)
}

model seat {
  seat_id     String        @id @db.Uuid
  airplane_id String?       @db.Uuid
  number      String        @db.VarChar(10)
  class       seat_class?
  status      seat_status?  @default(available)
  flight_seat flight_seat[]
  airplane    airplane?     @relation(fields: [airplane_id], references: [airplane_id], onDelete: NoAction, onUpdate: NoAction)
}

model token {
  token_id String  @id @db.Uuid
  user_id  String? @db.Uuid
  token    String? @db.VarChar
  user     user?   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  user_id       String      @id @db.Uuid
  username      String      @unique @db.VarChar
  password      String      @db.VarChar
  email         String      @unique @db.VarChar
  provider      String?     @db.VarChar
  provider_code String?     @db.VarChar
  role          user_role?  @default(user)
  image         String?     @db.VarChar
  booking       booking[]
  passenger     passenger[]
  token         token[]
}

model airplane {
  airplane_id    String   @id @db.Uuid
  name           String   @db.VarChar
  model          String?  @db.VarChar
  total_business Int?
  total_economy  Int?
  flight         flight[]
  seat           seat[]
}

model flight_seat {
  flight_seat_id String    @id @db.Uuid
  flight_id      String?   @db.Uuid
  seat_id        String?   @db.Uuid
  price          Float?
  is_booked      Boolean?  @default(false)
  booking        booking[]
  flight         flight?   @relation(fields: [flight_id], references: [flight_id], onDelete: NoAction, onUpdate: NoAction)
  seat           seat?     @relation(fields: [seat_id], references: [seat_id], onDelete: NoAction, onUpdate: NoAction)
}

enum booking_status {
  pending
  confirmed
  cancelled
}

enum membership_type {
  silver
  gold
  platinum
}

enum seat_class {
  economy
  business
}

enum seat_status {
  available
  booked
  maintenance
}

enum user_role {
  user
  admin
}
